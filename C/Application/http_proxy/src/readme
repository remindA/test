1.关于资源释放
    监听进程: 
        因为监听进程不涉及信号量的共享内存的操作，所以采用隐式回收

    handle_client:
        共享内存和信号量都由此进程创建，也由他负责销毁
        其他资源隐式回收

    handle_server:
        隐式回收


2.关于配置文件
    + 听的ip; port; listen_num; log_on/off;
    + remap_table
    + regex_table


2018.01.18
    在此之前使用了多进程结构，ipc采用了share memory.　it turns out to be very slow.
    fix some bug.
    发现下载时速度确实有点慢。使用长连接时，直连服务器下载视频的网速大约是10-20MB/s
    用了代理后大概网速只剩1-2MB/s

2018.01.19
    为提高转发性能，将ipc改为message queue。发现下载速度还是有点慢。

2018.01.20
    将代理程序运行在虚拟机上，测试速度。
  
2018.01.20
    采用单进程多线程模式。取消一切ipc。
    fuck: openssl不支持多线程，不可以在两个线程中ssl同时读写

2018.01.21
    测试使用的共享内存:为每个客户端连接建立新的进程和ipc通道，这肯定很耗费时间和资源
    更换架构：采用ipc池和３进程多线程模式（针对https短连接,　http有更好的方案）
        此架构只支持：持久连接一问一答循环。
        即便客户端采用了:管道连接方式，代理会转换成持久连接。
        进程间传递套接字描述符和msqid

    如何回收资源?
    线程通过自己进程所持有管道告诉(信号)监听进程回收msqid。管道操作要加锁。

    handle_client: msqid_c2s, SIGUSR1
    handle_server: msqid_s2c, SIGUSR2
    监听线程对msqid_pool操作要加锁
 

2018.05.10-05.12    
    1. 程序版本升级为1.4
    2. 修改替换模式
            从lan发往wan的包，lan内的所有ip替换为wan内ip(根据映射表替换)
    3. 重写对http换行(header, chunked)的处理。兼容"\n"和"\r\n"
    4. 监听端口可配置： 命令行 > 配置文件 > 默认监听端口
    5. 增加syslog便于调试
    6. 调试宏设计
        -
        -
        -
    7. 所有注册的信号统一使用信号处理函数
        信号处理函数易名: sig_listener --> sig_handler
    8. read_double_crlf易名read_http_header
    9. 所有的strstr替换为strcasestr
            openwrt使用ulibc包含strcasestr
            在代理中使用到strstr的地方全都是header, url。在http标准中
            -url中的协议名和域名不分大小写 http://www.baidu.com/index.html  <==> HTTP://WWW.BAIDU.COM/index.html
            -header的key字段部分大小写  content-type: text/html  <==> Content-type : text/html

    10. header_t增加crlf成员用于存储http头结束标志


    *解压缩目前只支持gzip, 当前的代码还不好做扩展
    Content-encoding: 
        br:
        gzip:
        deflate:
        compress:
        identity: RFC-- "this can only be used in Accept-encoding, but not Content-encoding."

